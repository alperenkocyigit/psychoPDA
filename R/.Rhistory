y <- data[,1]
data <- data,2:7
data <- data[,2:7]
x <- difLogReg(Data = as.data.frame(data), group = y, focal.name = "M")
x <- difLogReg(Data = as.data.frame(data), group = data.frame(y), focal.name = "M")
x <- difLogReg(Data = data, group = y, focal.name = "M")
View(y)
x <- difLogistic(Data = data, group = y, focal.name = "M")
difLogistic(Data = data, group = y, focal.name = "M")
Data <- data
group <- y
focal.name <- "M"
member.type = "group"
match = "score"
type = "both"
criterion = "LRT"
alpha = 0.05
all.cov = FALSE
purify = FALSE
nrIter = 10
p.adjust.method = NULL
save.output = FALSE
output = c("out", "default")
save.output = FALSE
if (group.type != "group" & group.type != "cont")
stop("'group.type' must be either 'group' or 'cont'",
call. = FALSE)
if (group.type != "group" & group.type != "cont")
stop("'group.type' must be either 'group' or 'cont'",
call. = FALSE)
group.type = "group"
if (group.type != "group" & group.type != "cont")
stop("'group.type' must be either 'group' or 'cont'",
call. = FALSE)
if (purify & match[1] != "score")
stop("purification not allowed when matching variable is not 'score'",
call. = FALSE)
if (group.type == "group" & length(focal.name) > 1)
res <- difGenLogistic(Data = Data, group = group, focal.names = focal.name,
anchor = anchor, match = match, type = type, criterion = criterion,
alpha = alpha, purify = purify, nrIter = nrIter,
p.adjust.method = p.adjust.method, save.output = save.output,
output = output)
if (group.type == "group" & length(focal.name) > 1)
res <- difGenLogistic(Data = Data, group = group, focal.names = focal.name,
anchor = anchor, match = match, type = type, criterion = criterion,
alpha = alpha, purify = purify, nrIter = nrIter,
p.adjust.method = p.adjust.method, save.output = save.output,
output = output)
else res <- difLogistic(Data = Data, group = group, focal.name = focal.name,
anchor = anchor, member.type = group.type, match = match,
type = type, criterion = criterion, alpha = alpha, purify = purify,
nrIter = nrIter, p.adjust.method = p.adjust.method, save.output = save.output,
output = output)
if (group.type == "group" & length(focal.name) > 1)
res <- difGenLogistic(Data = Data, group = group, focal.names = focal.name,
anchor = anchor, match = match, type = type, criterion = criterion,
alpha = alpha, purify = purify, nrIter = nrIter,
p.adjust.method = p.adjust.method, save.output = save.output,
output = output)
else res <- difLogistic(Data = Data, group = group, focal.name = focal.name,
anchor = anchor, member.type = group.type, match = match,
type = type, criterion = criterion, alpha = alpha, purify = purify,
nrIter = nrIter, p.adjust.method = p.adjust.method, save.output = save.output,
output = output)
return(res)
res <- difLogistic(Data = Data, group = group, focal.name = focal.name,
anchor = anchor, member.type = group.type, match = match,
type = type, criterion = criterion, alpha = alpha, purify = purify,
nrIter = nrIter, p.adjust.method = p.adjust.method, save.output = save.output,
output = output)
if (member.type != "group" & member.type != "cont")
stop("'member.type' must be either 'group' or 'cont'",
call. = FALSE)
if (purify & match[1] != "score")
stop("purification not allowed when matching variable is not 'score'",
call. = FALSE)
internalLog <- function() {
if (length(group) == 1) {
if (is.numeric(group)) {
gr <- Data[, group]
DATA <- Data[, (1:ncol(Data)) != group]
colnames(DATA) <- colnames(Data)[(1:ncol(Data)) !=
group]
}
else {
gr <- Data[, colnames(Data) == group]
DATA <- Data[, colnames(Data) != group]
colnames(DATA) <- colnames(Data)[colnames(Data) !=
group]
}
}
else {
gr <- group
DATA <- Data
}
if (member.type == "group") {
Group <- rep(0, nrow(DATA))
Group[gr == focal.name] <- 1
}
else Group <- gr
Q <- switch(type, both = qchisq(1 - alpha, 2), udif = qchisq(1 -
alpha, 1), nudif = qchisq(1 - alpha, 1))
if (!is.null(anchor)) {
dif.anchor <- anchor
if (is.numeric(anchor))
ANCHOR <- anchor
else {
ANCHOR <- NULL
for (i in 1:length(anchor)) ANCHOR[i] <- (1:ncol(DATA))[colnames(DATA) ==
anchor[i]]
}
}
else {
ANCHOR <- 1:ncol(DATA)
dif.anchor <- NULL
}
DDF <- ifelse(type == "both", 2, 1)
if (!purify | match[1] != "score" | !is.null(anchor)) {
PROV <- Logistik(DATA, Group, member.type = member.type,
match = match, type = type, criterion = criterion,
anchor = ANCHOR, all.cov = all.cov)
STATS <- PROV$stat
PVAL <- 1 - pchisq(STATS, DDF)
deltaR2 <- PROV$deltaR2
if (max(STATS) <= Q) {
DIFitems <- "No DIF item detected"
logitPar <- PROV$parM1
logitSe <- PROV$seM1
}
else {
DIFitems <- (1:ncol(DATA))[STATS > Q]
logitPar <- PROV$parM1
logitSe <- PROV$seM1
for (idif in 1:length(DIFitems)) {
logitPar[DIFitems[idif], ] <- PROV$parM0[DIFitems[idif],
]
logitSe[DIFitems[idif], ] <- PROV$seM0[DIFitems[idif],
]
}
}
RES <- list(Logistik = STATS, p.value = PVAL, logitPar = logitPar,
logitSe = logitSe, parM0 = PROV$parM0, seM0 = PROV$seM0,
cov.M0 = PROV$cov.M0, cov.M1 = PROV$cov.M1, deltaR2 = deltaR2,
alpha = alpha, thr = Q, DIFitems = DIFitems,
member.type = member.type, match = PROV$match,
type = type, p.adjust.method = p.adjust.method,
adjusted.p = NULL, purification = purify, names = colnames(DATA),
anchor.names = dif.anchor, criterion = criterion,
save.output = save.output, output = output)
if (!is.null(anchor) & match[1] == "score") {
RES$Logistik[ANCHOR] <- NA
RES$logitPar[ANCHOR, ] <- NA
RES$parM0[ANCHOR, ] <- NA
RES$deltaR2[ANCHOR] <- NA
for (i in 1:length(RES$DIFitems)) {
if (sum(RES$DIFitems[i] == ANCHOR) == 1)
RES$DIFitems[i] <- NA
}
RES$DIFitems <- RES$DIFitems[!is.na(RES$DIFitems)]
}
}
else {
nrPur <- 0
difPur <- NULL
noLoop <- FALSE
prov1 <- Logistik(DATA, Group, member.type = member.type,
match = match, type = type, criterion = criterion,
all.cov = all.cov)
stats1 <- prov1$stat
deltaR2 <- prov1$deltaR2
if (max(stats1) <= Q) {
DIFitems <- "No DIF item detected"
logitPar <- prov1$parM1
logitSe <- prov1$seM1
noLoop <- TRUE
}
else {
dif <- (1:ncol(DATA))[stats1 > Q]
difPur <- rep(0, length(stats1))
difPur[dif] <- 1
repeat {
if (nrPur >= nrIter)
break
else {
nrPur <- nrPur + 1
nodif <- NULL
if (is.null(dif))
nodif <- 1:ncol(DATA)
else {
for (i in 1:ncol(DATA)) {
if (sum(i == dif) == 0)
nodif <- c(nodif, i)
}
}
prov2 <- Logistik(DATA, Group, anchor = nodif,
member.type = member.type, match = match,
type = type, criterion = criterion, all.cov = all.cov)
stats2 <- prov2$stat
deltaR2 <- prov2$deltaR2
if (max(stats2) <= Q)
dif2 <- NULL
else dif2 <- (1:ncol(DATA))[stats2 > Q]
difPur <- rbind(difPur, rep(0, ncol(DATA)))
difPur[nrPur + 1, dif2] <- 1
if (length(dif) != length(dif2))
dif <- dif2
else {
dif <- sort(dif)
dif2 <- sort(dif2)
if (sum(dif == dif2) == length(dif)) {
noLoop <- TRUE
break
}
else dif <- dif2
}
}
}
prov1 <- prov2
stats1 <- stats2
PVAL <- 1 - pchisq(stats1, DDF)
deltaR2 <- deltaR2
DIFitems <- (1:ncol(DATA))[stats1 > Q]
logitPar <- prov1$parM1
logitSe <- prov1$seM1
for (idif in 1:length(DIFitems)) {
logitPar[DIFitems[idif], ] <- prov1$parM0[DIFitems[idif],
]
logitSe[DIFitems[idif], ] <- prov1$seM0[DIFitems[idif],
]
}
}
if (is.null(difPur) == FALSE) {
ro <- co <- NULL
for (ir in 1:nrow(difPur)) ro[ir] <- paste("Step",
ir - 1, sep = "")
for (ic in 1:ncol(difPur)) co[ic] <- paste("Item",
ic, sep = "")
rownames(difPur) <- ro
colnames(difPur) <- co
}
RES <- list(Logistik = stats1, p.value = PVAL, logitPar = logitPar,
logitSe = logitSe, parM0 = prov1$parM0, seM0 = prov1$seM0,
cov.M0 = prov1$cov.M0, cov.M1 = prov1$cov.M1,
deltaR2 = deltaR2, alpha = alpha, thr = Q, DIFitems = DIFitems,
member.type = member.type, match = prov1$match,
type = type, p.adjust.method = p.adjust.method,
adjusted.p = NULL, purification = purify, nrPur = nrPur,
difPur = difPur, convergence = noLoop, names = colnames(DATA),
anchor.names = NULL, criterion = criterion, save.output = save.output,
output = output)
}
if (!is.null(p.adjust.method)) {
df <- switch(RES$type, both = 2, udif = 1, nudif = 1)
pval <- 1 - pchisq(RES$Logistik, df)
RES$adjusted.p <- p.adjust(pval, method = p.adjust.method)
if (min(RES$adjusted.p, na.rm = TRUE) > alpha)
RES$DIFitems <- "No DIF item detected"
else RES$DIFitems <- which(RES$adjusted.p < alpha)
}
class(RES) <- "Logistic"
return(RES)
}
resToReturn <- internalLog()
if (length(group) == 1) {
if (is.numeric(group)) {
gr <- Data[, group]
DATA <- Data[, (1:ncol(Data)) != group]
colnames(DATA) <- colnames(Data)[(1:ncol(Data)) !=
group]
}
else {
gr <- Data[, colnames(Data) == group]
DATA <- Data[, colnames(Data) != group]
colnames(DATA) <- colnames(Data)[colnames(Data) !=
group]
}
}
length(group) == 1
is.numeric(group)
gr <- Data[, colnames(Data) == group]
colnames(Data)
length(group)
group <- as.numeric(group)
group
data <- cbind(group, data)
data
gr <- Data[, colnames(Data) == group]
Data <- data
gr <- Data[, colnames(Data) == group]
Data[, colnames(Data) == group]
group
colnames(Data)
colnames(Data) == group
colnames(Data)
colnames(group)
difLogistic(Data, Data[,1], focal.name = "M")
difLogistic(Data, Data[,1], focal.name = "M")
if (member.type != "group" & member.type != "cont")
stop("'member.type' must be either 'group' or 'cont'",
call. = FALSE)
if (purify & match[1] != "score")
stop("purification not allowed when matching variable is not 'score'",
call. = FALSE)
if (length(group) == 1) {
if (is.numeric(group)) {
gr <- Data[, group]
DATA <- Data[, (1:ncol(Data)) != group]
colnames(DATA) <- colnames(Data)[(1:ncol(Data)) !=
group]
}
else {
gr <- Data[, colnames(Data) == group]
DATA <- Data[, colnames(Data) != group]
colnames(DATA) <- colnames(Data)[colnames(Data) !=
group]
}
}
group <- Data[,1]
if (member.type != "group" & member.type != "cont")
stop("'member.type' must be either 'group' or 'cont'",
call. = FALSE)
if (purify & match[1] != "score")
stop("purification not allowed when matching variable is not 'score'",
call. = FALSE)
internalLog <- function() {
if (length(group) == 1) {
if (is.numeric(group)) {
gr <- Data[, group]
DATA <- Data[, (1:ncol(Data)) != group]
colnames(DATA) <- colnames(Data)[(1:ncol(Data)) !=
group]
}
else {
gr <- Data[, colnames(Data) == group]
DATA <- Data[, colnames(Data) != group]
colnames(DATA) <- colnames(Data)[colnames(Data) !=
group]
}
}
else {
gr <- group
DATA <- Data
}
if (member.type == "group") {
Group <- rep(0, nrow(DATA))
Group[gr == focal.name] <- 1
}
else Group <- gr
Q <- switch(type, both = qchisq(1 - alpha, 2), udif = qchisq(1 -
alpha, 1), nudif = qchisq(1 - alpha, 1))
if (!is.null(anchor)) {
dif.anchor <- anchor
if (is.numeric(anchor))
ANCHOR <- anchor
else {
ANCHOR <- NULL
for (i in 1:length(anchor)) ANCHOR[i] <- (1:ncol(DATA))[colnames(DATA) ==
anchor[i]]
}
}
else {
ANCHOR <- 1:ncol(DATA)
dif.anchor <- NULL
}
DDF <- ifelse(type == "both", 2, 1)
if (!purify | match[1] != "score" | !is.null(anchor)) {
PROV <- Logistik(DATA, Group, member.type = member.type,
match = match, type = type, criterion = criterion,
anchor = ANCHOR, all.cov = all.cov)
STATS <- PROV$stat
PVAL <- 1 - pchisq(STATS, DDF)
deltaR2 <- PROV$deltaR2
if (max(STATS) <= Q) {
DIFitems <- "No DIF item detected"
logitPar <- PROV$parM1
logitSe <- PROV$seM1
}
else {
DIFitems <- (1:ncol(DATA))[STATS > Q]
logitPar <- PROV$parM1
logitSe <- PROV$seM1
for (idif in 1:length(DIFitems)) {
logitPar[DIFitems[idif], ] <- PROV$parM0[DIFitems[idif],
]
logitSe[DIFitems[idif], ] <- PROV$seM0[DIFitems[idif],
]
}
}
RES <- list(Logistik = STATS, p.value = PVAL, logitPar = logitPar,
logitSe = logitSe, parM0 = PROV$parM0, seM0 = PROV$seM0,
cov.M0 = PROV$cov.M0, cov.M1 = PROV$cov.M1, deltaR2 = deltaR2,
alpha = alpha, thr = Q, DIFitems = DIFitems,
member.type = member.type, match = PROV$match,
type = type, p.adjust.method = p.adjust.method,
adjusted.p = NULL, purification = purify, names = colnames(DATA),
anchor.names = dif.anchor, criterion = criterion,
save.output = save.output, output = output)
if (!is.null(anchor) & match[1] == "score") {
RES$Logistik[ANCHOR] <- NA
RES$logitPar[ANCHOR, ] <- NA
RES$parM0[ANCHOR, ] <- NA
RES$deltaR2[ANCHOR] <- NA
for (i in 1:length(RES$DIFitems)) {
if (sum(RES$DIFitems[i] == ANCHOR) == 1)
RES$DIFitems[i] <- NA
}
RES$DIFitems <- RES$DIFitems[!is.na(RES$DIFitems)]
}
}
else {
nrPur <- 0
difPur <- NULL
noLoop <- FALSE
prov1 <- Logistik(DATA, Group, member.type = member.type,
match = match, type = type, criterion = criterion,
all.cov = all.cov)
stats1 <- prov1$stat
deltaR2 <- prov1$deltaR2
if (max(stats1) <= Q) {
DIFitems <- "No DIF item detected"
logitPar <- prov1$parM1
logitSe <- prov1$seM1
noLoop <- TRUE
}
else {
dif <- (1:ncol(DATA))[stats1 > Q]
difPur <- rep(0, length(stats1))
difPur[dif] <- 1
repeat {
if (nrPur >= nrIter)
break
else {
nrPur <- nrPur + 1
nodif <- NULL
if (is.null(dif))
nodif <- 1:ncol(DATA)
else {
for (i in 1:ncol(DATA)) {
if (sum(i == dif) == 0)
nodif <- c(nodif, i)
}
}
prov2 <- Logistik(DATA, Group, anchor = nodif,
member.type = member.type, match = match,
type = type, criterion = criterion, all.cov = all.cov)
stats2 <- prov2$stat
deltaR2 <- prov2$deltaR2
if (max(stats2) <= Q)
dif2 <- NULL
else dif2 <- (1:ncol(DATA))[stats2 > Q]
difPur <- rbind(difPur, rep(0, ncol(DATA)))
difPur[nrPur + 1, dif2] <- 1
if (length(dif) != length(dif2))
dif <- dif2
else {
dif <- sort(dif)
dif2 <- sort(dif2)
if (sum(dif == dif2) == length(dif)) {
noLoop <- TRUE
break
}
else dif <- dif2
}
}
}
prov1 <- prov2
stats1 <- stats2
PVAL <- 1 - pchisq(stats1, DDF)
deltaR2 <- deltaR2
DIFitems <- (1:ncol(DATA))[stats1 > Q]
logitPar <- prov1$parM1
logitSe <- prov1$seM1
for (idif in 1:length(DIFitems)) {
logitPar[DIFitems[idif], ] <- prov1$parM0[DIFitems[idif],
]
logitSe[DIFitems[idif], ] <- prov1$seM0[DIFitems[idif],
]
}
}
if (is.null(difPur) == FALSE) {
ro <- co <- NULL
for (ir in 1:nrow(difPur)) ro[ir] <- paste("Step",
ir - 1, sep = "")
for (ic in 1:ncol(difPur)) co[ic] <- paste("Item",
ic, sep = "")
rownames(difPur) <- ro
colnames(difPur) <- co
}
RES <- list(Logistik = stats1, p.value = PVAL, logitPar = logitPar,
logitSe = logitSe, parM0 = prov1$parM0, seM0 = prov1$seM0,
cov.M0 = prov1$cov.M0, cov.M1 = prov1$cov.M1,
deltaR2 = deltaR2, alpha = alpha, thr = Q, DIFitems = DIFitems,
member.type = member.type, match = prov1$match,
type = type, p.adjust.method = p.adjust.method,
adjusted.p = NULL, purification = purify, nrPur = nrPur,
difPur = difPur, convergence = noLoop, names = colnames(DATA),
anchor.names = NULL, criterion = criterion, save.output = save.output,
output = output)
}
if (!is.null(p.adjust.method)) {
df <- switch(RES$type, both = 2, udif = 1, nudif = 1)
pval <- 1 - pchisq(RES$Logistik, df)
RES$adjusted.p <- p.adjust(pval, method = p.adjust.method)
if (min(RES$adjusted.p, na.rm = TRUE) > alpha)
RES$DIFitems <- "No DIF item detected"
else RES$DIFitems <- which(RES$adjusted.p < alpha)
}
class(RES) <- "Logistic"
return(RES)
}
resToReturn <- internalLog()
